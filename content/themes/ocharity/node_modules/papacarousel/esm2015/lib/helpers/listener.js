export class Listener {
    constructor() {
        this.listenerArray = [];
        this.timeoutArray = [];
    }
    addListener(eventName, element, fn) {
        const length = this.listenerArray.push({ eventName, element, fn }) - 1;
        element.addEventListener(eventName, fn);
    }
    removeListener(fn) {
        const index = this.listenerArray.findIndex(l => l.fn === fn);
        if (this.listenerArray[index]) {
            const item = this.listenerArray.splice(index, 1)[0];
            item.element.removeEventListener(item.eventName, item.fn);
        }
    }
    destroyListeners() {
        this.listenerArray.map(l => l.element.removeEventListener(l.eventName, l.fn));
        this.timeoutArray.map(t => clearTimeout(t.timer));
    }
    setTimeoutFn(identificator, timer) {
        const index = this.timeoutArray.findIndex(t => t.identificator === identificator);
        if (this.timeoutArray[index])
            this.timeoutArray[index].timer = timer;
        else
            this.timeoutArray.push({ identificator, timer });
    }
    clearTimeoutFn(identificator) {
        const index = this.timeoutArray.findIndex(t => t.identificator === identificator);
        if (this.timeoutArray[index]) {
            const item = this.timeoutArray.splice(index, 1)[0];
            clearTimeout(item.timer);
        }
    }
}
export const listener = new Listener;
//# sourceMappingURL=listener.js.map