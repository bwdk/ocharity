var Listener = /** @class */ (function () {
    function Listener() {
        this.listenerArray = [];
        this.timeoutArray = [];
    }
    Listener.prototype.addListener = function (eventName, element, fn) {
        var length = this.listenerArray.push({ eventName: eventName, element: element, fn: fn }) - 1;
        element.addEventListener(eventName, fn);
    };
    Listener.prototype.removeListener = function (fn) {
        var index = this.listenerArray.findIndex(function (l) { return l.fn === fn; });
        if (this.listenerArray[index]) {
            var item = this.listenerArray.splice(index, 1)[0];
            item.element.removeEventListener(item.eventName, item.fn);
        }
    };
    Listener.prototype.destroyListeners = function () {
        this.listenerArray.map(function (l) { return l.element.removeEventListener(l.eventName, l.fn); });
        this.timeoutArray.map(function (t) { return clearTimeout(t.timer); });
    };
    Listener.prototype.setTimeoutFn = function (identificator, timer) {
        var index = this.timeoutArray.findIndex(function (t) { return t.identificator === identificator; });
        if (this.timeoutArray[index])
            this.timeoutArray[index].timer = timer;
        else
            this.timeoutArray.push({ identificator: identificator, timer: timer });
    };
    Listener.prototype.clearTimeoutFn = function (identificator) {
        var index = this.timeoutArray.findIndex(function (t) { return t.identificator === identificator; });
        if (this.timeoutArray[index]) {
            var item = this.timeoutArray.splice(index, 1)[0];
            clearTimeout(item.timer);
        }
    };
    return Listener;
}());
export { Listener };
export var listener = new Listener;
//# sourceMappingURL=listener.js.map