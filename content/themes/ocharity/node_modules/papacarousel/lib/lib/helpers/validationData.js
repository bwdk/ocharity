var ValidationData = /** @class */ (function () {
    function ValidationData() {
        this.types = ['fading', 'slidingY', 'slidingX'];
        this.transitionFnTypes = ['ease', 'linear', 'ease-in', 'ease-out', 'ease-in-out'];
    }
    ValidationData.prototype.timePerSlideChecker = function (timeFn) {
        if (typeof timeFn !== 'number')
            throw new Error('The timePerSlide variable must be a number!');
        return timeFn;
    };
    ValidationData.prototype.timingFnChecker = function (timeFn) {
        if (typeof timeFn !== 'number')
            throw new Error('The timingFn variable must be a number!');
        return timeFn;
    };
    ValidationData.prototype.transitionFnTypesChecker = function (transitionFn) {
        if (!this.transitionFnTypes.includes(transitionFn))
            throw new Error("The transitionFn variable must be one of those - " + this.types + "!");
        return transitionFn;
    };
    ValidationData.prototype.typeChecker = function (type) {
        if (!this.types.includes(type))
            throw new Error("The type variable must be one of those - " + this.transitionFnTypes + "!");
        return type;
    };
    ValidationData.prototype.progressBarChecker = function (bar) {
        if (typeof bar !== 'boolean')
            throw new Error('The progressBar variable must be a boolean!');
        return bar;
    };
    ValidationData.prototype.buttonsChecker = function (buttons) {
        if (typeof buttons !== 'boolean')
            throw new Error('The buttons variable must be a boolean!');
        return buttons;
    };
    ValidationData.prototype.parentChecker = function (parent) {
        if (typeof parent === 'string')
            parent = document.querySelector(parent);
        if (!parent)
            throw new Error('Carousel parent is not defined!');
        if (!(parent instanceof HTMLElement))
            throw new Error('Carousel parent is not an instance of HTMLElement!');
        return parent;
    };
    ValidationData.prototype.elementsChecker = function (elements, parentEl) {
        if (typeof elements === 'string')
            elements = Array.from(parentEl.querySelectorAll(elements));
        if (!elements || !elements.length)
            throw new Error('Array of carousel elements is empty!');
        if (!elements.every(function (e) { return e instanceof HTMLElement; }))
            throw new Error('Not every element of the array carousel is an instance of HTMLElement!');
        return elements;
    };
    return ValidationData;
}());
export { ValidationData };
export var validationData = new ValidationData;
//# sourceMappingURL=validationData.js.map