var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { carouselNavigation } from './carouselNavigation';
import { progressBar } from './progressBar';
import { carouselFactory } from './carouselAnimations/carouselFactory';
import { concreteSubject } from './helpers/concreteSubject';
import { listener } from './helpers/listener';
import { validationData } from './helpers/validationData';
import { pageVisibility } from './helpers/pageVisibility';
import { Calculation } from './helpers/calculation';
var PapaCarousel = /** @class */ (function () {
    function PapaCarousel(builder) {
        var _this = this;
        this.identificatorLoop = 'carouselLoop';
        this.transitionEndFn = function (e) {
            _this.addStyles(e.srcElement, _this.carousel.starterPack());
            listener.removeListener(_this.transitionEndFn);
        };
        this.carouselLoopFn = function () {
            return setTimeout(function () {
                var currentEl = _this.elements[_this.calculation.getIndex()];
                listener.addListener('transitionend', currentEl, _this.transitionEndFn);
                _this.slideCarousel(1);
                listener.setTimeoutFn(_this.identificatorLoop, _this.carouselLoopFn());
            }, _this.timePerSlide);
        };
        var parentEl = validationData.parentChecker(builder.getParent());
        this.timePerSlide = validationData.timePerSlideChecker(builder.getTimePerSlide());
        this.carousel = carouselFactory.getCarousel(validationData.typeChecker(builder.getType()));
        this.elements = validationData.elementsChecker(builder.getElements(), parentEl);
        if (validationData.buttonsChecker(builder.getButtons())) {
            carouselNavigation.initButtons(parentEl);
            concreteSubject.attach(this.onNavClick.bind(this));
        }
        if (validationData.progressBarChecker(builder.getProgressBar())) {
            progressBar.initBar(parentEl, this.timePerSlide);
        }
        this.transitionProperty = this.carousel.getTransitionProperties() + " " + validationData.timingFnChecker(builder.getTimingFn()) + "ms \n            " + validationData.transitionFnTypesChecker(builder.getTransitionFn());
        this.calculation = new Calculation(this.elements.length - 1);
        pageVisibility.initListener();
        this.initSlider();
    }
    PapaCarousel.prototype.slideCarousel = function (newIndex, fn) {
        var _a = [this.elements[this.calculation.getIndex()], this.elements[this.calculation.getIndex(newIndex)]], currentEl = _a[0], newEl = _a[1];
        this.addStyles(currentEl, this.carousel.hideAnimation());
        this.addStyles(newEl, this.carousel.showAnimation());
        if (typeof fn === 'function')
            fn(currentEl);
    };
    PapaCarousel.prototype.initSlider = function (resetSlider) {
        if (!resetSlider)
            this.prepareItems();
        listener.setTimeoutFn(this.identificatorLoop, this.carouselLoopFn());
    };
    PapaCarousel.prototype.prepareItems = function () {
        var _this = this;
        this.elements.map(function (e, i) { return _this.addStyles(e, __assign({}, (i === _this.calculation.getIndex() ? _this.carousel.showAnimation() : _this.carousel.starterPack()), { transition: _this.transitionProperty })); });
    };
    PapaCarousel.prototype.addStyles = function (el, styles) {
        for (var _i = 0, _a = Object.entries(styles); _i < _a.length; _i++) {
            var _b = _a[_i], property = _b[0], value = _b[1];
            el.style[property] = value;
        }
    };
    PapaCarousel.prototype.onNavClick = function (args) {
        var _this = this;
        listener.clearTimeoutFn(this.identificatorLoop);
        if (args === 'pageHidden')
            return;
        if (typeof args === 'number')
            this.slideCarousel(args, function (el) { return listener.addListener('transitionend', el, _this.transitionEndFn); });
        this.initSlider(true);
    };
    return PapaCarousel;
}());
export { PapaCarousel };
//# sourceMappingURL=papaCarousel.js.map